plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'java-library'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.beryx.jlink' version '2.25.0'
    id 'jacoco'
    id "com.adarshr.test-logger" version "3.1.0"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    // ignore specific classes or packages
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude:
                            [ 'org/example/firstyearproject/App.class',
                              'org/example/firstyearproject/Controller.class',
                              'org/example/firstyearproject/Model.class',
                              'org/example/firstyearproject/View.class',
                              'org/example/firstyearproject/ShortestPath/IndexMinPQ',
                              'org/example/firstyearproject/ShortestPath/DijkstraSP',
                            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn test // tests are required to run before generating the report
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.example.firstyearproject'
    mainClass = 'org.example.firstyearproject.App'
}

javafx {
    version = '21.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.apache.commons:commons-text:1.10.0'


}

test {
    useJUnitPlatform()

    testLogging.showStandardStreams = true
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'App'
    }
}

jlinkZip {
    group = 'distribution'
}